pipeline {
    agent any

    environment {
        IMAGE_NAME = 'mon-site-fetes'
        CONTAINER_NAME = 'test-site-fetes'
        DOCKER_HUB_USER = 'arcaneur'
        DOCKER_HUB_REPO = 'arcaneur/projetweb'
        KUBECONFIG = '/home/jenkins/.kube/config' // ‚úÖ Chemin user-friendly compatible Jenkins
    }

    stages {
        stage('Cloner le d√©p√¥t') {
            steps {
                git url: 'https://github.com/arcaneur/ProjetWeb.git', branch: 'main'
            }
        }

        stage('Installation des d√©pendances Python') {
            steps {
                sh '''
                    python3 -m venv venv
                    source venv/bin/activate
                    pip install -r requirements.txt
                    pip install coverage
                '''
            }
        }

        stage('Tests unitaires avec couverture') {
            steps {
                sh '''
                    source venv/bin/activate
                    coverage run manage.py test
                    coverage xml
                '''
            }
        }

        stage('Analyse SonarQube') {
            environment {
                SONARQUBE_SCANNER_HOME = tool 'SonarQubeScanner'
            }
            steps {
                withSonarQubeEnv('SonarQube') {
                    sh '''
                        ${SONARQUBE_SCANNER_HOME}/bin/sonar-scanner \
                        -Dsonar.projectKey=mon-site-fetes \
                        -Dsonar.sources=. \
                        -Dsonar.python.coverage.reportPaths=coverage.xml
                    '''
                }
            }
        }

        stage('Construire l\'image Docker') {
            steps {
                sh 'docker build -t $IMAGE_NAME .'
            }
        }

        stage('Push sur Docker Hub') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'dockerhub-creds', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                    sh '''
                        echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin
                        docker tag $IMAGE_NAME $DOCKER_HUB_REPO:latest
                        docker push $DOCKER_HUB_REPO:latest                    
                    '''
                }
            }
        }

        stage('D√©ployer sur Kubernetes (K3s)') {
            steps {
                sh '''
                    export KUBECONFIG=$KUBECONFIG
                    kubectl delete deployment mon-site-fetes-deployment --ignore-not-found=true
                    kubectl apply -f ./deployment.yaml
                    kubectl apply -f ./service.yaml
                '''
            }
        }

        /*
        stage('Lancer le conteneur (local)') {
            steps {
                sh '''
                    docker rm -f $CONTAINER_NAME || true
                    docker run -d -p 8081:80 --name $CONTAINER_NAME $IMAGE_NAME
                '''
            }
        }
        */
    }

    post {
        success {
            echo "‚úîÔ∏è Le site est d√©ploy√© avec succ√®s via K3s."
        }
        failure {
            echo "‚ùå √âchec du pipeline"
        }
        cleanup {
            echo "üßπ Nettoyage termin√©."
        }
    }
}
