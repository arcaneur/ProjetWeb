pipeline {
    agent any

    environment {
        IMAGE_NAME = 'mon-site-fetes'
    }

    stages {
        stage('Cloner le d√©p√¥t') {
            steps {
                git url: 'https://github.com/arcaneur/ProjetWeb.git', branch: 'main'
            }
        }

        stage('Analyse SonarQube') {
            environment {
                SONARQUBE_SCANNER_HOME = tool 'SonarQubeScanner'
            }
            steps {
                withSonarQubeEnv('SonarQube') {
                    sh "${SONARQUBE_SCANNER_HOME}/bin/sonar-scanner -Dsonar.projectKey=mon-site-fetes -Dsonar.sources=."
                }
            }
        }

        stage('Construire l\'image Docker') {
            steps {
                sh 'docker build -t $IMAGE_NAME .'
            }
        }

        // Les √©tapes suivantes sont d√©sactiv√©es pour all√©ger
        /*
        stage('Push sur Docker Hub') {
            steps {
                echo '√âtape Docker Hub d√©sactiv√©e pour tests'
            }
        }

        stage('D√©ployer sur Kubernetes') {
            steps {
                echo 'D√©ploiement Kubernetes d√©sactiv√© pour tests'
            }
        }

        stage('Lancer le conteneur (local)') {
            steps {
                echo 'Ex√©cution locale du conteneur d√©sactiv√©e pour tests'
            }
        }
        */
    }

    post {
        success {
            echo "‚úîÔ∏è Build termin√© avec succ√®s"
        }
        failure {
            echo "‚ùå √âchec du pipeline"
        }
        cleanup {
            echo "üßπ Nettoyage termin√©"
        }
    }
}
